#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass GEB
\use_default_options true
\maintain_unincluded_children false
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman 方正北魏楷书_GB18030
\font_sans 方正北魏楷书_GB18030
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 10
\spacing other 1.2
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\pdf_quoted_options "colorlinks=true,linkcolor=blue"
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 0
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 0
\use_package mhchem 1
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\paperwidth 9cm
\paperheight 12cm
\leftmargin 10mm
\topmargin 5pheight%
\rightmargin 20mm
\bottommargin 5pheight%
\headheight 10mm
\headsep 20mm
\footskip 0mm
\secnumdepth 1
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle empty
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
自我相关与自我复制
\end_layout

\begin_layout Section
遗传机制的形式化
\end_layout

\begin_layout Standard
哥德尔定理的证明离不开自我相关。如果我们把产生自我相关的机制与生物体进行自我复制的遗传机制进行一番比较，就会发现两种机制之间有着优美的同构关系。
\end_layout

\begin_layout Standard
我们先来看比较熟悉的自我相关的结构，以下面这些句子为例。
\end_layout

\begin_layout Standard
(1)这个句子中有9个字。
\end_layout

\begin_layout Standard
(2)这个句子是没有意义的，因为它自我相关。
\end_layout

\begin_layout Standard
(3)这个句子中没有副词。
\end_layout

\begin_layout Standard
(4)这个句子是错的。(爱皮梅尼特悖论)
\end_layout

\begin_layout Standard
(5)我现在写的这个句子是你现在读的。
\end_layout

\begin_layout Standard
这些句子的自我相关是很明显的。每个句子都在描述本身的性质。做到自我相关最一般的方法就是前面提到的奎因法。它是通过描述句子的另一部分来实现自我相关。而被描述的部分
与奎因句子本身又是同构的。
\end_layout

\begin_layout Standard
我们知道，有一种计算机程序可以设计有同样能力的计算机程序。我们可以说这是一种自我复制。当然最典型的自我复制要数生物体的自我复制了。这种自我复制的机制并不是产生和
原来一样的生物个体。因为在这种复制中保留的并不是某一个生物体的信息，而是同一物种的信息。
\end_layout

\begin_layout Standard
生物体的自我复制或者说生物的遗传机制是20世纪最迷人、最深刻的研究课题之一。我们并不想在这儿讨论有关遗传的生物学研究成果，而是要建立一种遗传模型。即用一套形式符
号及其运算规则来描述遗传的机制，并把这种机制与自我相关的机制进行比较。我们用4种符号来表示遗传基因中的4种碱基：
\end_layout

\begin_layout Standard
A．腺嘌呤
\end_layout

\begin_layout Standard
G．鸟嘌呤
\end_layout

\begin_layout Standard
L．胞嘧啶
\end_layout

\begin_layout Standard
T．胸腺嘧啶
\end_layout

\begin_layout Standard
由这些符号组成的序列称为遗传模型中的串。
\end_layout

\begin_layout Standard
这些串可以进行各种运算，包括剪切，连接或者保持原有的长度。而能够执行这些运算的机制我们称为酶。酶有一个显著的特点就是它对4种碱基中的某一个有所偏爱。
\end_layout

\begin_layout Standard
还省一个新的术语是复制模式。这种模式不是用A复制A，而是用A复制A或者相反，用G复制C或者相反。我们把这两对称为互补的碱基对。因此所谓复制一个串并不是复制它的原
样，而是复制与它互补的串。
\end_layout

\begin_layout Standard
酶所执行的指令可以分成15种：
\end_layout

\begin_layout Standard
cut——剪切串
\end_layout

\begin_layout Standard
del——从串上去掉碱基
\end_layout

\begin_layout Standard
swi——把酶转换到其他串上
\end_layout

\begin_layout Standard
mvr——向右移动一个单元
\end_layout

\begin_layout Standard
mvl——向左移动一个单元
\end_layout

\begin_layout Standard
cop——开始复制
\end_layout

\begin_layout Standard
off——停止复制
\end_layout

\begin_layout Standard
ina——把A插入这个单元的右边
\end_layout

\begin_layout Standard
ine——把C插入这个单元的右边
\end_layout

\begin_layout Standard
ing——把G插入这个单元的右边
\end_layout

\begin_layout Standard
int——把T插入这个单元的右边
\end_layout

\begin_layout Standard
rpy——向右寻找最近的嘧啶(T或C)
\end_layout

\begin_layout Standard
rpu——向右寻找最近的嘌呤(A或G)
\end_layout

\begin_layout Standard
1py——向左寻找最近的嘧啶
\end_layout

\begin_layout Standard
lpu一—向左寻找最近的嘌呤
\end_layout

\begin_layout Standard
我们可以把这些指令看成是氨基酸。每一种酶都是由这些氨基酸组成的序列。
\end_layout

\begin_layout Standard
例如这样的酶：
\end_layout

\begin_layout Standard
rpu-inc-cop-mvr-mvl-swi-lpu-int
\end_layout

\begin_layout Standard
作用于以下的串：
\end_layout

\begin_layout Standard
TAGATCCAGTCCATCGA
\end_layout

\begin_layout Standard
假设这种酶偏爱G，我们从中间的那个G开始。向右找到A在它的右边插入C，然后进行复制，右移，左移，然后转换到另一段串上得到：
\end_layout

\begin_layout Standard
GA
\end_layout

\begin_layout Standard
TAGATCCAGTCCACTCGA
\end_layout

\begin_layout Standard
为了清楚起见可以把它们例置一下，继续以下的程序得到最后的两个串：
\end_layout

\begin_layout Standard
ATG和TAGATCCAGTCCACATCGA
\end_layout

\begin_layout Standard
(注意：在进行int操作时，除插入T外还要在另—个串的相应位置插入互补的A)。
\end_layout

\begin_layout Standard
从这一例子我们可以看到，酶是怎样作用于那些串的。这就好像是MU系统中的规则，按照这些规则就可以产生新的定理。所不同的是在酶的作用下，原来的串永远消失了。
\end_layout

\begin_layout Standard
我们进一步确定这些氨基酸与碱基对的对应关系。这种关系可以列表如下：
\end_layout

\begin_layout Standard
按照这种关系，上面例子令的酶就可以从最后得到的长串“转译”过来。
\end_layout

\begin_layout Standard
在表中每一格的右下角还有一个字母。这些字母以一种特殊的方式决定了酶的第三层次的结构。s表示保持原来方向，r表示向右转，l则表示向左转。还是以我们刚才的酶为例子，
可以得到如下所示的图：
\end_layout

\begin_layout Standard
cop
\end_layout

\begin_layout Standard
↑
\end_layout

\begin_layout Standard
swi←cut←mvl←int
\end_layout

\begin_layout Standard
↑
\end_layout

\begin_layout Standard
mvr
\end_layout

\begin_layout Standard
↑
\end_layout

\begin_layout Standard
rpy→ina→rpu
\end_layout

\begin_layout Standard
根据这种结构中最初和最后的箭头方向则可确定这种酶偏爱哪一种碱基。
\end_layout

\begin_layout Standard
原始箭头最终箭头结合字母
\end_layout

\begin_layout Standard
→→A
\end_layout

\begin_layout Standard
→↑C
\end_layout

\begin_layout Standard
→↓G
\end_layout

\begin_layout Standard
→←T
\end_layout

\begin_layout Standard
由此可见这种酶是偏爱C的。
\end_layout

\begin_layout Standard
不过上表中在AA这一格是空白的，它起标点符号的作用，表明一种酶的结束。这就是说，在一个串上可以记录几种酶。
\end_layout

\begin_layout Standard
到这儿为止，我们已经给出了遗传模型的所有规则。用这些规则去做一些符号游戏是非常有趣的，特别是那种可以自我复制的串。这就是说给定一个串，在核糖体的作用下就产生记录
在串上的酶，这些酶作用于原来的串就生成子串。子串通过核独体的作用又生成第二代的酶，它作用于子串生成第三代的串。如此循环往复无穷。
\end_layout

\begin_layout Standard
因此这种遗传模型的核心是酶和串的相互变换。串通过核糖体译成酶，酶通过符号运算生成串。这样串就同时起了数据的作用这些数据的程序的作用。于是两种不同的层次就混在一起
了。相比之下，在MIU系统中，推理规则在比定理更高的层次中，两者是分开的。TNT和其他形式系统也是这样。但是在TNT中不同层次在另一种意义上又混起来了，使语言和
元语言的差别消除了。这就是关于系统的陈述可以在系统内部反映出来。
\end_layout

\begin_layout Standard
当然，实际的遗传机制要复杂得多，但是上述的遗传模型的“概念框架”有助于读者理解真实遗传的秘密。
\end_layout

\begin_layout Standard
DNA的原意是脱氧核糖核酸，它由一串比较简单的组分即核苷酸组成。每个核苷酸分子由三部分组成：(1)磷酸基，(2)去掉一个氧原子的核糖，(3)碱基。从碱基上可以将
四种核苷酸区分开来。这四种碱基便是：A，腺嘌呤；G，鸟嘌呤；C，胞嘧啶；T，胸腺嘧啶。DNA通常那是双股的结构，两股上相应的碱基是互补的。在同一股上的核苷酸以共
价健紧紧相连而形成骨架。而两股相应的核苷酸之间则是较弱的氢键。
\end_layout

\begin_layout Standard
DNA在细胞核中，但是细胞中的许多“动因”是在细胞质中，特别是那些酶，它们是由核糖体在细胞质中制造的。但是关于酶的结构的信息却贮存在DNA中。这种信息是通过信使
核糖核酸mRNA传给细胞质中的核糖体，使它完成创造酶的工作。
\end_layout

\begin_layout Standard
酶是蛋白质的一种。蛋白质由一系列的氨基酸组成。氨基酸有20种，这和前面的符号稍有出入。氨基酸的复杂程度与核苷酸差不多。但是蛋白质的序列则要短得多。典型的蛋白质分
子由三百来个氨基酸组成，而DNA的串则由几十万甚至几百万个核苷酸组成。
\end_layout

\begin_layout Standard
DNA的双股解开并复制mRNA的过程为转录。mRNA在细胞质中遇到了核糖体就发生转译的过程。如果我们把mRNA比作一条磁带，那么核糖体就是录音机的磁头。所奏出的
音乐就是根据上面信息所生成的氨基酸构成的蛋白质。我们把这些信息称为遗传密码。
\end_layout

\begin_layout Standard
由核糠体生成的蛋自质可以越来越长。它们不仅具有氨基酸序列的一级结构，而且具有相缠绕的三级结构。正如前面已经指出的那样，三级结构是蕴涵在一级结构里的。
\end_layout

\begin_layout Standard
可以把蛋白质比作音乐。音乐并不只是一串音符。我们可以从更高的层次上感受到音乐的旋律和速率。同样，蛋白质也有不同的结构层次。除了—级结构和三级结构外，还存在着二级
结构和四级结构。不过我们在这儿就不详细谈了。
\end_layout

\begin_layout Section
遗传机制的支持系统
\end_layout

\begin_layout Standard
生物界在漫长的进化过程中发展了遗传机制。这是大自然最伟大的杰作之一。我们在上一节中建立了使遗传机制形式化的遗传模型。这使我们能够从一个全新的角度来认识生物遗传的
过程，从而可以获得许多有益的启示。现在让我们来考虑这样—个问题，“究竟什么样的DNA能够指导自己的复制？”当然并不是任何DNA都能够做到这一点的。DNA能够进行
自我复制就必须包含一组指指令，能够精确地把这样一些酶组装起来，而这些酶则能够完成这种任务。因而不能指望DNA的串能单独复制自己；要想从DNA中产生这些潜在的蛋白
质不仅需要核糖体，而且需要DNA聚合酶。这就是说需要有一个系统来支持转录和转译的过程顺利地进行。我们把能够最低限度满足这种需要的系统称为“最小支持系统”。对于D
NA的自我复制来讲，这样的“最小支持系统”必须包括：
\end_layout

\begin_layout Standard
(1)某些RNA的聚合酶，它们能从DNA制备mRNA；
\end_layout

\begin_layout Standard
(2)某些核糖体。
\end_layout

\begin_layout Standard
我们不难看出，所谓“足够强的支持系统”与“足够强的形式系统”在本质上是一样的。只是两种不同的表现形式而已。前者是产生自我复制的先决条件，后者是实现自我相关的先决
条件。这两种系统之间存在着同构关系。
\end_layout

\begin_layout Standard
我们不妨把遗传模型中的一些概念和形式数论系统中的相应概念作一番比较：
\end_layout

\begin_layout Standard
DNA的串&lt;——&gt;TNT的串
\end_layout

\begin_layout Standard
mDNA的串&lt;——&gt;关于数的陈述
\end_layout

\begin_layout Standard
蛋白质&lt;——&gt;关于元TNT的陈述
\end_layout

\begin_layout Standard
作用于蛋白质的蛋白质&lt;——&gt;关于元TNT陈述的陈述
\end_layout

\begin_layout Standard
作用于(作用于蛋白质的蛋白质)的蛋白质&lt;——&gt;关于(关于元TNT陈述的陈述)的陈述
\end_layout

\begin_layout Standard
转录&lt;——&gt;翻译
\end_layout

\begin_layout Standard
(DNA=&gt;RNA)(TNT=&gt;N)
\end_layout

\begin_layout Standard
转译&lt;——&gt;算术化
\end_layout

\begin_layout Standard
(RNA=&gt;蛋白质)(N=&gt;元TNT)
\end_layout

\begin_layout Standard
遗传编码&lt;——&gt;哥德尔编码
\end_layout

\begin_layout Standard
（任意的约定）（任意的约定）
\end_layout

\begin_layout Standard
氨基酸&lt;——&gt;在元TNT使用的引用TNT的符号
\end_layout

\begin_layout Standard
自我复制&lt;——&gt;自我相关
\end_layout

\begin_layout Standard
能使自我复制进行得足够强的细胞支持系统&lt;——&gt;能产生自我相关的足够强的算术形式系统
\end_layout

\begin_layout Standard
……
\end_layout

\begin_layout Standard
蛋白质对蛋白质的作用&lt;——&gt;关于陈述的陈述
\end_layout

\begin_layout Standard
等等等等
\end_layout

\begin_layout Standard
我们可以看到，在这两种抽象结构之间有一种几乎是神秘的共同性。当然这种对照并不是两种理论一致性的严格证明，但是它明显地表示两者之间有一种极为密切的关系，它值得我们
进一步加以探讨。
\end_layout

\begin_layout Standard
从上面的图中可以看到，两边都出现了任意复杂的圈，一边是蛋白质对蛋白质的作用可以无限地延续下去，另一边则关于陈述的陈述也可以无限地延续下去。这就有可能在较高的层次
上出现怪圈并且循环下去。
\end_layout

\begin_layout Standard
我们在第2章给出了唱机唱片系统与形式系统之间的对应关系。在这里又给出了遗传机制与形式系统之间的对应关系。有兴趣的读者可以根据这两种对应关系去建立唱机唱片系统与遗
传机制之间的对应关系。
\end_layout

\begin_layout Standard
当然在遗传机制中还有很多复杂的现象，如病毒的自我装配、细胞的分化、繁殖的方式等等。这些概念也和转录、转译一样有助于我们对极其复杂系统的理解。例如细胞一再复制的过
程引起了大量有专门功能的细胞的形成。这就好像字母的序列，从一个人传递到另一个人，尽管要求每个人都下使它走样，然而却总会使它带上传递者个人的影响。我们还可以进一步
想到，不但程序和数据是交织在一起的，而且程序的翻译机和数据的处理机，包括语言在内，也都密切地结合在一起。虽然可以在它们之间刻出界线、分出层次来，但是更重要的是要
看到它们之间的交互作用。
\end_layout

\begin_layout Standard
我们可以用计算机的话言来描述分子生物学中的许多概念。因为DNA中包含了有关蛋白质构造的全部信息，而这些蛋白质是细胞中的主动因素。我们可以把DNA看成是用高层次语
言写成的程序。它可以翻译成细脑的“机器语言”即蛋白质。另一方面DNA本身又是被动的分子，要受各种酶的控制。从这种意义上讲DNA完全像是一个数据。而且DNA还含有
模板，可以复制出tRNA(转移核糖核酸)这就意味着DNA还含有比本身更高层次的语言。
\end_layout

\begin_layout Standard
再拿蛋白质来讲。蛋白质是有主动性的分子，可以执行细胞的所有功能，可以把它们看成是细胞(细胞本身是处理机)的“机器语言”的程序。但从另一方面来讲，蛋白质是一种硬件
，而程序却是软件，因此把蛋白质看成处理机也许更为合适。此外蛋白质往往受到其他蛋白质的作用，因此也可以把它看成是被处理的数据，最后我们还可以把蛋白质看成翻译器。
\end_layout

\begin_layout Standard
我们也可以这样来分析核糖体和转移核糖核酸等。不过对于所有这些生化分子相互关系的分析仍然是很浅显的。我们只是想说明，我们认为截然不同的层次往往是交织在一起的。实际
上计算机科学早就有一种明显的趋势把这些看来截然分开的各方面结合在一起。对于人工智能的研究来讲，这点就更为重要了。
\end_layout

\begin_layout Section
没有结束的唱机之战
\end_layout

\begin_layout Standard
(阿基里斯去拜访蟹的家。蟹向阿基里斯展示了自己最崇拜的画家马格里特的作品。然后又向阿基里斯谈起乌龟与他之间的那场唱机之战。)
\end_layout

\begin_layout Standard
蟹：你知道乌龟有多鬼，他几乎能破坏我所能得到的任何一种唱机
\end_layout

\begin_layout Standard
阿：不过据我所知这场竞争的结局是你最后拥有一台不可战胜的唱机——它自身带有摄像机和微电子计算机等等，从而能够将自己拆散并重组，使得自己不会被破坏。
\end_layout

\begin_layout Standard
蟹：可惜我的计划成了泡影。乌龟还是胜我一筹，他看出了我忽略的一点：控制拆散和重装过程的部件必须在整个过程中保持稳定。因为显然的原因，它是无法将自身拆散或重装的。
结果乌龟制造了一张唱片使这部分被震坏了。如果你不见怪的话，可以说乌龟总能发现一个系统中的“阿基里斯脚踵”。
\end_layout

\begin_layout Standard
阿：你一定感到很悲伤吧。
\end_layout

\begin_layout Standard
蟹：有一阵子是那样，不过幸好事情没有就此交结。在乌龟的推荐下，我借阅了一本包罗万象的书。达本书中谈到了能够组装自身的核糖体。也就是说，在一个细胞里有这样的生物单
元，它们可以分裂并自动地组装起来。
\end_layout

\begin_layout Standard
阿：这可真妙！是否一架唱机也能有这种性质呢？如果这样你不是就可以有一架摧毁不了的唱机？即使被破坏了也能再自行组装起来。
\end_layout

\begin_layout Standard
蟹：我也是这么想的，并把这种想法告诉了唱机制造商。几个月之后，他写信给我，告诉我这种唱机终于造出来了。我满怀信心地邀请乌龟来试验一下我这架唱机。
\end_layout

\begin_layout Standard
阿：我想你这次总该如愿了吧。
\end_layout

\begin_layout Standard
蟹：很遗憾，当那架唱机的弹簧和导线满天飞开的时候，我是多么悲伤。乌龟为了安慰我就向我解释，对此他也无能为力，这就是因为有了歌德尔定理。
\end_layout

\begin_layout Standard
阿：我实在很同情你，不过后来你怎么办呢？
\end_layout

\begin_layout Standard
蟹：我放弃了那种“完备唱机”的念头。我想一架唱机要不被毁坏就只好放那些不会损坏它的唱片，也就是说只演奏一些唱片。
\end_layout

\begin_layout Standard
阿：这就是说，你为了保存唱机就牺牲了那种想复制一切声音的愿望。
\end_layout

\begin_layout Standard
蟹：我是被迫这样做的。这就是防止唱机去演奏那些不相容的唱片。
\end_layout

\begin_layout Standard
阿：这可真是一个出色的战略。
\end_layout

\begin_layout Standard
蟹：不过乌龟也改变了他的策略。他捉摸怎样使唱片能逃避我的检查。
\end_layout

\begin_layout Standard
阿：那你怎样把那些“不相容”的唱片排除持呢？
\end_layout

\begin_layout Standard
蟹：如果你替我保守秘密的话，我就告诉你。我的办法是把我所有的唱片秘密列成表。然后用电视机扫描这张表，用电子计算机记录这些数据。
\end_layout

\begin_layout Standard
阿：我想你的这种方法很容易失败。乌龟只须把你这张表弄到手就可以了。
\end_layout

\begin_layout Standard
蟹：没那么容易，因为我的摄像机会检查每张唱片的纹沟，然后交给计算机分机，只有具有我自己风格的唱片才能通过这种检验。而这种风格是乌龟无法模仿的。你是否愿意看看我的
这种防御装置的内部是怎样工作的呢？
\end_layout

\begin_layout Standard
阿：那当然好。我只要把镜头对准哪儿，屏幕上就会出现那些视界里的东西。
\end_layout

\begin_layout Standard
蟹：经是你把它对准电视机的屏幕呢？
\end_layout

\begin_layout Standard
阿：啊，我看到了一连串的屏幕，这可真是把自身卷了进去。而屏幕成了自我缠绕系统中的一部分。不过我的头被你弄成了一团乱麻。
\end_layout

\begin_layout Standard
蟹：我很理解你的感受。你为什么不抛弃那些关于自我缠绕的念头，坐下来看看我的藏画。(蟹取下嘴里的烟斗，把它放在马格里特写有—行字的画上。)(图20)
\end_layout

\begin_layout Standard
阿：这张画真有意思。我喜欢它的框架，特别是框
\end_layout

\begin_layout Standard
上的雕花。不过那一行字是什么意思？
\end_layout

\begin_layout Standard
蟹：这是一行法文，意思是：“这不是烟斗”。
\end_layout

\begin_layout Standard
阿：可这确实是烟斗啊。你刚才还用它抽烟呢！
\end_layout

\begin_layout Standard
蟹：嗯，你误解了。法文的“这”是指画，而不是指那个烟斗。当然烟斗还是烟斗。
\end_layout

\begin_layout Standard
阿：我可不知道画上的“这”是指整个画还是指画上的烟斗。我的天！这又是一种“自我缠绕”！我真感到不好受，我想我是要病了……
\end_layout

\begin_layout Standard
8.4自相缠绕的层次
\end_layout

\begin_layout Standard
思维是最复杂的现象之一。人们在思维过程中往往改变自己的思维规律，甚至改变那些使这些规律变化的规律。但是这些都是指软件的规律。在最低层次的规律是永远不变的。神经元
总是按照同样简单的方式进行操作。正是大脑中硬件的这种固定性造成了软件的灵活性，这就是智能的有趣结构。我们现在要讨论的就是这种可以自我改进的软件与固定不变的硬件之
间的差异。
\end_layout

\begin_layout Standard
我们仍然以下棋为例。一般来讲，下棋的规则是不能变的，改变的是每一步棋之后的局势。让我们想想能否把下棋的规则也变动一下呢？能否重新定义马的走法，或者使棋盘增添一些
方格？如果能够做到达一点，那么我们就有两种层次的规则。一种层次的规则告诉我们如何移动各种棋子，另一种层次的规则告诉我们如何改变这些规则。如果我们走得更远，用两种
方式来解释各步棋：(1)作为下棋的步骤；(2)作为移动棋子的规则。那么当我们下棋时，每当我们移动一步棋也同时改变了下棋的规则。这样一来，下棋的规则总是在不断的变
化之中。于是就出现了自相缠绕的层次，或者说形成了怪圈。每走一步都要影响到下棋的规则，这些规则的变化又影响到棋子的走法，如此循环下去。这里虽然有不同的层次之分，但
是关于层次“高级”与“低级”的说法已经没有意义了。
\end_layout

\begin_layout Standard
不过我们再细细分析一下，仍然可以找出许多保持不变的东西。例如下棋要按一定的规则，对手们轮流下棋等等。也就是说存在着一种不变化的层次。因此我们可以把各种层次分为性
质不同的两类。一类层次是不变的，我们称为I层次。另外一类层次是可以变化的，我们称为了层次。T层次是可以缠绕的，I层次则不行。I层次控制着T层次上发生的事件，T层
次却无法影响I层次。
\end_layout

\begin_layout Standard
也许你会设想，可以用某一种方式使I层次与T层次缠绕起来。实现了这种“超级缠绕”就意味着I层次的变化。例如你和下棋的对手达成协议，把每人轮流下一次改为一方多下一次
。但是这样的结果使得原来属于I层次的层次变成了T层次。与此同时必然会产生新的I层次凌驾于这种“超级缠绕”之上。这个过程会无休止地延伸下去。
\end_layout

\begin_layout Standard
我们可以设想这样一种情形。Z是作者T作品中的人物；同时T是作者E作品中的人物；E是作者Z作品中的人物。这样的关系究竟能否实现呢？当然可以。不过得有—个花招。那就
是这三个人都是另外一位作者H笔下的人物。这样作者H就是不变的层次，它在Z、T和E所在的层次之上，是不受他们的影响的。
\end_layout

\begin_layout Standard
埃台尔的作品《画画的双手》(图22)就是这样的例子。这里的左手面出了右手，右手同时画出了左手。它们以这种绝妙的方式相互缠绕在一起。但是它们都是由埃舍尔的手画出来
的。埃舍尔的手在这两只手的层次之上。
\end_layout

\begin_layout Standard
在我们的思维中，符号与符号相互作用，这种作用可以自相缠绕。而且这些符号还可以彼此引起内部的变化。有趣的是这种符号的自相缠绕依赖于在低层次上神经元的自相缠绕。不过
这是两种性质完全不同的自相缝绕。前者是一种怪圈，后者却类似于反馈的回路。我们要细心留意这种差别。
\end_layout

\begin_layout Standard
饶有兴味的是在政府机构中同样有层次自相缠绕的现象。就拿法庭来讲，当两个人因为某个案例而争讼时，法庭可以作出裁决。这时法庭与争议者分属不同的层次。但是如果法庭本身
也卷入了法律事件，那就截然不同了。这时就形成了怪圈。当然也可以让更高级的法庭来进行裁决，摆脱这种怪圈。但是如果连最高级的法庭也被卷入纠纷那又怎么样呢？美国的水门
事件就是这样。议会要求总统服从最高法院的裁决，但是总统却可以加以否决。因为他有法律上的权力在某些情况下不服从最高法院的裁决。这样就产生了一个无法摆脱的怪圈。
\end_layout

\begin_layout Standard
对于证明的评价也是一个复杂的问题。能否定义证明是什么呢？也许是做不到的。也许有人会想到希尔伯特对形式证明的定义。即严格按照形式系统的规则，从前提推到结论。但是我
们已经看到，任何严格的规则都有例外，而不严格的规则又不能算是规则。其实不同的人、不同的人工智能程序都有不同的评价证明的标准。评价证明的问题实质上也就是判定真理性
的问题，它在很大程度上是一种艺术，它依赖于对于美和简单性的意识就和依赖于逻辑原理和可以客观描述的依据一样。因此“什么是证明”并不是一个哲学问题，而是可以用不同层
次加以解释的问题，它也渗透到各个领域里去。而当我们深入探讨这个问题时不可避免地会遇到怪圈。
\end_layout

\begin_layout Standard
当我们一开始见到埃舍尔画中的怪圈时，虽然感到有趣、迷惑，但是总有怪的感觉，感到这是一种不可思议的现象。现在我们可以看到，怪圈不仅不是一种罕见的现象，而且在许多场
合里是不可避免的。它是许多复杂系统的共同特点。既然如此，那么是否也存在“心理学的哥德尔定理”呢？如果我们着眼于领会这种说法的精神实质，而不是强求在形式上把这个定
理翻译成心理学的术语，那么也许会给我们一些深刻的启示。我在这里仅仅提及两个例子。第一，把哥德尔定理和人的思维联系起来可以涉及到一个人是否明智的问题。你怎样判定自
已是否明智呢？这是一个怪圈。你可以根据自己无矛盾的逻辑对世界作出某种解释，但是你怎么能判定自己的逻辑是否正确呢？当然只能根据自己的逻辑。我看不出怎样能找到问题的
答案。哥德尔定理还有另一层意义上的隐喻。“我们无法理解自己的思维的。”这是一个需要谨慎分析的命题。怎样才叫“理解”呢？对此可以有种种不同的解释。对于“理解”的解
释依赖于我们去理解的方法。也许禅宗的这种说法不无道理，我是无法理解我自己的。
\end_layout

\end_body
\end_document
